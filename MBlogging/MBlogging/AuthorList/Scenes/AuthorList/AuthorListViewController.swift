//
//  AuthorListViewController.swift
//  MBlogging
//
//  Created by Sujata Chakraborty on 26/09/2019.
//  Copyright (c) 2019 Sujata Chakraborty. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AuthorListDisplayLogic: class
{
    /**
       callback from presenter to show Authors list in View
       We show the data from ViewModel
    */
    func displayAuthorList(viewModel: AuthorList.FetchAuthorList.ViewModel)
    
    /**
     callback from presenter about error it received while fecting authors data
     As we are doing pagination , in case of error We are reducing one count of the current page
     In this function we can show the error to user , if required
     */
    
    func errorReceivedInAuthorFetchRequest(error : MBError)
}


class AuthorListViewController: UITableViewController, AuthorListDisplayLogic
{
    
    
    var interactor: AuthorListBusinessLogic?
    var router: (NSObjectProtocol & AuthorListRoutingLogic & AuthorListDataPassing)?
    var displayedAuthors : [AuthorList.FetchAuthorList.ViewModel.DisplayAuthorList] = []
    
    //Properties
    
    var pageToBeFetched = 1 // Maintains page number to be fetched
    var isOngoingRequest = false //check whether author fetch request is already ongoing or not

    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    
    // MARK: Setup
    
    /**
     Call this function to set up items to maintain clean architecture.
     */
    private func setup()
    {
        let viewController = self
        let interactor = AuthorListInteractor()
        let presenter = AuthorListPresenter()
        let router = AuthorListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchAuthors()
    }
    /**
     Call this function to get list of Authors.
     */
    func fetchAuthors()
    {
        let request = AuthorList.FetchAuthorList.Request(pageNumber: pageToBeFetched, urlToRequest: Constants.baseURL)
        interactor?.fetchAuthors(request: request)
    }
    
    
    //MARK: AuthorListDisplayLogic functions
    
    func displayAuthorList(viewModel: AuthorList.FetchAuthorList.ViewModel)
    {
        //nameTextField.text = viewModel.name
        displayedAuthors = viewModel.authorList
        tableView.reloadData()
        self.isOngoingRequest = false

    }
    
    func errorReceivedInAuthorFetchRequest(error: MBError) {
        
        self.isOngoingRequest = false

        if pageToBeFetched != 1
        {
            pageToBeFetched = pageToBeFetched - 1
        }
        else
        {
            //Depending on whether we need to show any error or not
        }
    }
    
    
    
    // MARK: - Table view data source
    
    override func numberOfSections(in tableView: UITableView) -> Int
    {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    {
        return displayedAuthors.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        let displayedAuthor = displayedAuthors[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: "cell")
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: "cell")
        }
        cell?.textLabel?.text = displayedAuthor.name
        cell?.detailTextLabel?.text = displayedAuthor.id
        return cell!
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 140.0
    }
    
    
    // MARK: - ScrollView Delegate
        
    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        
        
        if offsetY > contentHeight - scrollView.frame.height * 4 {
            if !isOngoingRequest {
                fetchNextBatchAuthors()
            }
            
        }
    }
    
    //MARK: pagination author List
    
    func fetchNextBatchAuthors()
    {
        pageToBeFetched =  pageToBeFetched + 1
        fetchAuthors()
    }
    
}
