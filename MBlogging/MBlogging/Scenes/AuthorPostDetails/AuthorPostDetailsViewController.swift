//
//  AuthorPostDetailsViewController.swift
//  MBlogging
//
//  Created by Sujata Chakraborty on 28/09/2019.
//  Copyright (c) 2019 Sujata Chakraborty. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AuthorPostDetailsDisplayLogic: class
{
  func displayAuthorDetails(viewModel: AuthorPostDetails.FetchAuthorDetails.ViewModel)
  func displayPostDetails(viewModel: AuthorPostDetails.FetchPostDetails.ViewModel)

}

class AuthorPostDetailsViewController: UITableViewController, AuthorPostDetailsDisplayLogic
{
  var interactor: AuthorPostDetailsBusinessLogic?
  var router: (NSObjectProtocol & AuthorPostDetailsRoutingLogic & AuthorPostDetailsDataPassing)?
  var displayedAuthor : AuthorPostDetails.FetchAuthorDetails.ViewModel.DisplayAuthor?

  // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = AuthorPostDetailsInteractor()
    let presenter = AuthorPostDetailsPresenter()
    let router = AuthorPostDetailsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setUpUI()

    showAuthorDetails()
  }
  
  // MARK: Do something
  
    func showAuthorDetails()
    {
        let request = AuthorPostDetails.FetchAuthorDetails.Request()
        interactor?.getAuthorDetails(request: request)
    }
    
    func showPostList()
    {
        let request = AuthorPostDetails.FetchPostDetails.Request()
        interactor?.fetchPostDetails(request: request)
    }
    
    func displayAuthorDetails(viewModel: AuthorPostDetails.FetchAuthorDetails.ViewModel)
    {
       
    }
    
    func displayPostDetails(viewModel: AuthorPostDetails.FetchPostDetails.ViewModel)
    {
        
    }
    
    
    //MARK: UITableView DataSource
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        var cell = tableView.dequeueReusableCell(withIdentifier: "postcell")
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: "postcell")
        }
        
        return cell!
    }
    
    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        
        // Dequeue with the reuse identifier
        let header = self.tableView.dequeueReusableHeaderFooterView(withIdentifier: "CustomTableViewHeader") as! CustomSectionHeader
        
        if let author = self.displayedAuthor
        {
         
        }
        return header
    }
    
    
    override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 100
    }
    
    
    // Give a height to our table view cell
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    // We have only one section
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    // One cell is enough
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 100
    }
    
    //MARK: Set up View
    
    func setUpUI()
    {
        // TableView header creation
        
        let nib = UINib(nibName: "CustomSectionHeader", bundle: nil)
        tableView.register(nib, forHeaderFooterViewReuseIdentifier: "CustomTableViewHeader")
        
    }

}
