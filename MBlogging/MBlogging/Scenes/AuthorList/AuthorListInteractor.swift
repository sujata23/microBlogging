//
//  AuthorListInteractor.swift
//  MBlogging
//
//  Created by Sujata Chakraborty on 26/09/2019.
//  Copyright (c) 2019 Sujata Chakraborty. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AuthorListBusinessLogic
{
    func fetchAuthors(request: AuthorList.FetchAuthorList.Request)
}

protocol AuthorListDataStore
{
    var authors: [Author]? { get }
    
}

class AuthorListInteractor: AuthorListBusinessLogic, AuthorListDataStore
{
    var presenter: AuthorListPresentationLogic?
    var worker: AuthorListWorker = AuthorListWorker()
    var authors: [Author]? = [Author]()
    
    
    
    func fetchAuthors(request: AuthorList.FetchAuthorList.Request)
    {
        weak var weakself = self
        worker.fetchAuthorList(url: request.urlToRequest, pageNumber: request.pageNumber, sortOrder: request.sortOrder , completionHandler: { (authorList, error) in
            
            if let authors = authorList
            {
                
                if authors.count == 0
                {
                    let emptyError = MBError.init(mbErrorCode: .EmptyData)
                    let response = AuthorList.FetchAuthorList.Response(authors: nil, error: emptyError)
                    weakself?.presenter?.presentAuthorList(response: response)
                }
                else
                {
                    weakself?.authors?.append(contentsOf: authors)
                    
                    let response = AuthorList.FetchAuthorList.Response(authors: authors, error: nil)
                    weakself?.presenter?.presentAuthorList(response: response)
                }
            }
            else if let error = error
            {
                weakself?.logError(error: error)
                let response = AuthorList.FetchAuthorList.Response(authors: nil, error: error)
                weakself?.presenter?.presentAuthorList(response: response)
            }
            
        })
        
        
    }
    
    
    /**
     Use this function to process/log Error received from any request
     */
    
    func logError(error : MBError)
    {
        //Log error for monitoring
    }
}
