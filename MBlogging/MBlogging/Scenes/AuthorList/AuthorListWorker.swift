//
//  AuthorListWorker.swift
//  MBlogging
//
//  Created by Sujata Chakraborty on 26/09/2019.
//  Copyright (c) 2019 Sujata Chakraborty. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class AuthorListWorker : BaseWorkerClass
{
    var dataTask: URLSessionDataTask?
    
    
    /**
       Below request to fetch author list from Server
     parameter 1:- base url
     parameter 2:- page number to fetch(Every page contains 10 authors)
     
    */
    func fetchAuthorList(url: String, pageNumber : Int , sortOrder : SortOrder,  completionHandler: @escaping (_: [Author]?, _: MBError?) -> Void)
    {
        var authorFectchUrl = url
        authorFectchUrl = authorFectchUrl + Constants.authorURLParameter
        
        let urlToRequest = createURLStringWith(baseUrl: url, sortOrder: sortOrder, requestForEntity: Constants.authorURLParameter, queryString: nil, pageIndexToBeFetched: pageNumber)
        
        if let url = urlToRequest {
            
            dataTask =
                BaseWorkerClass.sessionManager.dataTask(with: url) { [weak self] data, response, error in
                    defer {
                        self?.dataTask = nil
                    }
                    if let error = error {
                        //need to handle error
                        
                        let mbError = MBError.init(mbErrorCode: MBErrorCode.ServerError)
                        mbError.mbErrorDebugInfo = error.localizedDescription + "problem for Author list for page index \(pageNumber)"
                        completionHandler(nil , mbError)
                        
                    } else if
                        let data = data,
                        let response = response as? HTTPURLResponse,
                        response.statusCode == 200 {
                        
                        DispatchQueue.main.async {
                            do
                            {
                                
                                let decoder = JSONDecoder()
                                let authorList = try decoder.decode([Author].self, from: data)
                                
                                completionHandler(authorList , nil)
                                
                            }
                            catch let jsonErr {
                                
                                let mbError = MBError.init(mbErrorCode: MBErrorCode.UnableToParseErrorJson)
                                mbError.mbErrorDebugInfo = jsonErr.localizedDescription + "problem for Author list for page index \(pageNumber)"
                                completionHandler(nil , mbError)
                            }
                        }
                    }
                    else
                    {
                        let mbError = MBError.init(mbErrorCode: MBErrorCode.ServerError)
                        mbError.mbErrorDebugInfo = "Data issue Author list for page index \(pageNumber)"
                        completionHandler(nil , mbError)
                    }
            }
            dataTask?.resume()
        }
        else
        {
            let mbError = MBError.init(mbErrorCode: MBErrorCode.GeneralError)
            mbError.mbErrorDebugInfo = "problem with URL while fetching request for Author list for page index \(pageNumber)"
            completionHandler(nil , mbError)
        }
        
    }
    
    override func createURLStringWith(baseUrl : String , sortOrder : SortOrder , requestForEntity : String , queryString : String? , pageIndexToBeFetched : Int?) -> URL?
    {
        let concatenatedURL = baseUrl + requestForEntity
        var orderQuery = fetchRequestQueryParameterFor(order: sortOrder)
        
        if let pageNumber = pageIndexToBeFetched
        {
            orderQuery = orderQuery +  "&" + "_page=" + String(pageNumber)
        }
        
        if var urlComponents = URLComponents(string: concatenatedURL) {
            urlComponents.query =  orderQuery
            
            
            guard let urlToRequest = urlComponents.url else {
                
                return nil
            }
            
            return urlToRequest
            
        }
        
        return nil
        
    }
    
    
}
