//
//  CommentSectionInteractor.swift
//  MBlogging
//
//  Created by Sujata Chakraborty on 29/09/2019.
//  Copyright (c) 2019 Sujata Chakraborty. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CommentSectionBusinessLogic
{
    func getReferencePost(request: CommentSection.FetchReferencePost.Request)

    func fetchCommentDetails(request: CommentSection.FetchCommentList.Request , order : SortOrder , pageNumber : Int)
}

protocol CommentSectionDataStore
{
    var referencePost: Post! { get set }
    
}

class CommentSectionInteractor: CommentSectionBusinessLogic, CommentSectionDataStore
{
    var referencePost: Post!
    
    var presenter: CommentSectionPresentationLogic?
    var worker: CommentSectionWorker? = CommentSectionWorker()
    //var name: String = ""
    
    // MARK: Responsibility of Interactor
    
    
    func getReferencePost(request: CommentSection.FetchReferencePost.Request)
    {
        let response = CommentSection.FetchReferencePost.Response.init(post: referencePost)
        presenter?.presentPost(response: response)
    }
    
    func fetchCommentDetails(request: CommentSection.FetchCommentList.Request , order : SortOrder , pageNumber : Int)
    {
        
        guard let postId = request.postId else
        {
            let mbError = MBError.init(mbErrorCode: MBErrorCode.GeneralError)
            mbError.mbErrorDebugInfo = "Author id is missing for fetching posts"
            
            let response = CommentSection.FetchCommentList.Response(commentList: nil, error: mbError)
            presenter?.presentCommentList(response: response)
            
            return
        }
        
        
        weak var weakSelf = self
        
        worker?.fetchComments(url: Constants.kBaseURL, pageNumber: pageNumber, postId: postId, sortOrder: order, completionHandler: { (commentList, error) in
            
            if let commentList = commentList
            {
                if commentList.count == 0
                {
                    let emptyError = MBError.init(mbErrorCode: .EmptyData)
                    let response = CommentSection.FetchCommentList.Response(commentList: nil, error: emptyError)
                    weakSelf?.presenter?.presentCommentList(response: response)
                }
                else
                {
                    let response = CommentSection.FetchCommentList.Response(commentList: commentList, error: nil)
                    weakSelf?.presenter?.presentCommentList(response: response)
                    
                }
                
            }
            else if let  error = error
            {
                let response = CommentSection.FetchCommentList.Response(commentList: nil, error: error)
                weakSelf?.presenter?.presentCommentList(response: response)
            }
            
        })
        
        
    }
}
